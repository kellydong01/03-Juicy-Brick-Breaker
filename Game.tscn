[gd_scene load_steps=27 format=2]

[ext_resource path="res://Brick/Brick_Container.gd" type="Script" id=1]
[ext_resource path="res://Paddle/Paddle.tscn" type="PackedScene" id=2]
[ext_resource path="res://Ball/Ball_Container.gd" type="Script" id=3]
[ext_resource path="res://Game.gd" type="Script" id=4]
[ext_resource path="res://UI/Pause_Menu.tscn" type="PackedScene" id=5]
[ext_resource path="res://Wall/Wall.gd" type="Script" id=6]
[ext_resource path="res://UI/HUD.tscn" type="PackedScene" id=7]
[ext_resource path="res://UI/Instructions.tscn" type="PackedScene" id=8]
[ext_resource path="res://Assets/brick_break.wav" type="AudioStream" id=9]
[ext_resource path="res://Assets/wall.wav" type="AudioStream" id=10]
[ext_resource path="res://Assets/fw_03.ogg" type="AudioStream" id=11]
[ext_resource path="res://Assets/fw_06.ogg" type="AudioStream" id=12]
[ext_resource path="res://Assets/paddle.wav" type="AudioStream" id=13]
[ext_resource path="res://Assets/msuic.mp3" type="AudioStream" id=14]
[ext_resource path="res://Assets/death.wav" type="AudioStream" id=15]
[ext_resource path="res://UI/Camera.gd" type="Script" id=16]
[ext_resource path="res://Assets/flame.png" type="Texture" id=17]

[sub_resource type="Shader" id=4]
code = "// Fireworks shader
// Based on shadertoy shader by Martijn Steinrucken aka BigWings - 2015 
// (https://www.shadertoy.com/view/lscGRl)

shader_type canvas_item;

uniform float PI = 3.141592653589793238;
uniform float TWOPI = 6.283185307179586 ;
uniform float NUM_EXPLOSIONS = 5.0;
uniform float NUM_PARTICLES = 50.0;

// Noise functions by Dave Hoskins

uniform vec3 MOD3 = vec3(0.1031,0.11369,0.13787);

vec3 hash31(float p) {
   vec3 p3 = fract(vec3(p) * MOD3);
   p3 += dot(p3, p3.yzx + 19.19);
   return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));
}

float hash12(vec2 p) // attention changement vec2 p en vec3
{
                vec3 p3  = fract(vec3(p.xy, 0.0) * MOD3);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z);
}

float circ(vec2 uv, vec2 pos, float size) {
                uv -= pos;
    
    size *= size;
    return smoothstep(size*1.1, size, dot(uv, uv));
}

float lighter(vec2 uv, vec2 pos, float size) {
    uv -= pos;
    size *= size;
    return size/dot(uv, uv);
}

vec3 explosion(vec2 uv, vec2 p, float seed, float t) {
                
    vec3 col = vec3(0.);
    
    vec3 en = hash31(seed);
    vec3 baseCol = en;
    for(float i=0.; i<NUM_PARTICLES; i++) {
               vec3 n = hash31(i)-.5;
       
                               vec2 startP = p-vec2(0., t*t*.1);        
        vec2 endP = startP+normalize(n.xy)*n.z;
        
        
        float pt = 1.-pow(t-1., 2.);
        vec2 pos = mix(p, endP, pt);    
        float size = mix(.01, .005, smoothstep(0., .1, pt));
        size *= smoothstep(1., .1, pt);
        
        float sparkle = (sin((pt+n.z)*100.)*.5+.5);
        sparkle = pow(sparkle, pow(en.x, 3.)*50.)*mix(0.01, .01, en.y*n.y);
		float B = smoothstep(en.x-en.z, en.x+en.z, t)*smoothstep(en.y+en.z, en.y-en.z, t);
        size += sparkle*B;
        
        col += baseCol*lighter(uv, pos, size);
    }
    
    return col;
}


void fragment() {
    vec2 iResolution = vec2(1024,600);
	vec2 uv = FRAGCOORD.xy / iResolution.xy;
                uv.x -= .5;
    uv.x *= iResolution.x/iResolution.y;
    
    float n = hash12(uv+10.0);
    float t = TIME*.5;
    
    vec3 c = vec3(0.);
    
    for(float i=0.; i<NUM_EXPLOSIONS; i++) {
               float et = t+i*1234.45235;
        float id = floor(et);
        et -= id;
        
        vec2 p = hash31(id).xy;
        p.x -= .5;
        p.x *= 1.6;
        c += explosion(uv, p, id, et);
		}
    
	float alpha = 1.0;
//	if (c.x < 0.2){alpha=0.0;} 
    COLOR = vec4(c, alpha);
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/PI = 3.14159
shader_param/TWOPI = 6.28319
shader_param/NUM_EXPLOSIONS = 5.0
shader_param/NUM_PARTICLES = 50.0
shader_param/MOD3 = Vector3( 0.1031, 0.11369, 0.13787 )

[sub_resource type="Shader" id=8]
code = "// Fire shader

shader_type canvas_item;

uniform vec2 fireMovement = vec2(-0.01, -0.5);
uniform vec2 distortionMovement = vec2(-0.01, -0.3);
uniform float normalStrength = 25.0;
uniform float distortionStrength = 0.5;


/** NOISE **/
float rand(vec2 co) {
  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

vec2 hash( vec2 p ) {
	p = vec2( dot(p,vec2(127.1,311.7)),
			  dot(p,vec2(269.5,183.3)) );

	return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise( in vec2 p ) {
   float K1 = 0.366025404; // (sqrt(3)-1)/2;
   float K2 = 0.211324865; // (3-sqrt(3))/6;

	vec2 i = floor( p + (p.x+p.y)*K1 );
	
    vec2 a = p - i + (i.x+i.y)*K2;
    vec2 o = step(a.yx,a.xy);    
    vec2 b = a - o + K2;
	vec2 c = a - 1.0 + 2.0*K2;

    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );

	vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));

    return dot( n, vec3(70.0) );
}

float fbm ( in vec2 p ) {
    float f = 0.0;
    mat2 m = mat2(vec2(1.6,  1.2), vec2(-1.2,  1.6 ));
    f  = 0.5000*noise(p); p = m*p;
    f += 0.2500*noise(p); p = m*p;
    f += 0.1250*noise(p); p = m*p;
    f += 0.0625*noise(p); p = m*p;
    f = 0.5 + 0.5 * f;
    return f;
}

/** DISTORTION **/
vec3 bumpMap(vec2 uv) { 
	vec2 iResolution = vec2(1024,600);
    vec2 s = 1. / iResolution.xy;
    float p =  fbm(uv);
    float h1 = fbm(uv + s * vec2(1., 0));
    float v1 = fbm(uv + s * vec2(0, 1.));
       
   	vec2 xy = (p - vec2(h1, v1)) * normalStrength;
    return vec3(xy + .5, 1.);
}

/** MAIN **/
void fragment() {
	float timeScale = TIME * 1.0;
	vec2 iResolution = vec2(1024,600);
    vec2 uv = FRAGCOORD.xy/iResolution.xy;

    vec3 normal = bumpMap(uv * vec2(1.0, 0.3) + distortionMovement * timeScale);
    
    vec2 displacement = clamp((normal.xy - .5) * distortionStrength, -1., 1.);
    uv += displacement; 
    
    vec2 uvT = (uv * vec2(1.0, 0.5)) + timeScale * fireMovement;
    float n = pow(fbm(8.0 * uvT), 1.0);    
    
    float gradient = pow(1.0 - uv.y, 2.0) * 5.;
    float finalNoise = n * gradient;
    
    vec3 color = finalNoise * vec3(2.*n, 2.*n*n*n, n*n*n*n);
    COLOR = vec4(color, 1.);
}"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/fireMovement = Vector2( -0.01, -0.5 )
shader_param/distortionMovement = Vector2( -0.01, -0.3 )
shader_param/normalStrength = 25.0
shader_param/distortionStrength = 0.5

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 100, 500 )

[sub_resource type="Curve" id=6]
_data = [ Vector2( 0, 1 ), 0.0, 0.0, 0, 0, Vector2( 0.504951, 0.281818 ), 0.0, 0.0, 0, 0, Vector2( 1, 0.127273 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="Gradient" id=7]
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 0 )

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 612, 100 )

[sub_resource type="Environment" id=3]
background_mode = 4
dof_blur_near_enabled = true
dof_blur_near_distance = 0.5
glow_enabled = true
glow_bloom = 0.02
glow_blend_mode = 0
glow_bicubic_upscale = true

[node name="Game" type="Node2D"]
script = ExtResource( 4 )

[node name="Background" type="ColorRect" parent="."]
material = SubResource( 5 )
margin_right = 1024.0
margin_bottom = 807.0
color = Color( 1, 1, 1, 0 )

[node name="Floor" type="ColorRect" parent="."]
material = SubResource( 9 )
margin_left = 9.0
margin_top = 789.0
margin_right = 1017.0
margin_bottom = 847.0
color = Color( 1, 1, 1, 0 )

[node name="Wall_Container" type="CanvasLayer" parent="."]

[node name="Wall_Left" type="StaticBody2D" parent="Wall_Container"]
script = ExtResource( 6 )

[node name="ColorRect" type="ColorRect" parent="Wall_Container/Wall_Left"]
margin_left = -190.0
margin_top = -100.0
margin_right = 10.0
margin_bottom = 900.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="Wall_Container/Wall_Left"]
position = Vector2( -90, 400 )
shape = SubResource( 1 )

[node name="Fire" type="CPUParticles2D" parent="Wall_Container/Wall_Left"]
emitting = false
amount = 10
lifetime = 0.8
one_shot = true
explosiveness = 0.6
randomness = 1.0
local_coords = false
texture = ExtResource( 17 )
direction = Vector2( 0, 0 )
spread = 90.0
initial_velocity = 600.0
initial_velocity_random = 1.0
angular_velocity = 400.0
angular_velocity_random = 1.0
scale_amount_curve = SubResource( 6 )
color_ramp = SubResource( 7 )
hue_variation = 1.0
hue_variation_random = 1.0

[node name="Wall_Right" type="StaticBody2D" parent="Wall_Container"]
position = Vector2( 1024, 0 )
script = ExtResource( 6 )

[node name="ColorRect" type="ColorRect" parent="Wall_Container/Wall_Right"]
margin_left = -10.0
margin_top = -100.0
margin_right = 190.0
margin_bottom = 900.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="Wall_Container/Wall_Right"]
position = Vector2( 90, 400 )
shape = SubResource( 1 )

[node name="Fire" type="CPUParticles2D" parent="Wall_Container/Wall_Right"]
emitting = false
amount = 10
lifetime = 0.8
one_shot = true
explosiveness = 0.6
randomness = 1.0
local_coords = false
texture = ExtResource( 17 )
direction = Vector2( 0, 0 )
spread = 90.0
initial_velocity = 600.0
initial_velocity_random = 1.0
angular_velocity = 400.0
angular_velocity_random = 1.0
scale_amount_curve = SubResource( 6 )
color_ramp = SubResource( 7 )
hue_variation = 1.0
hue_variation_random = 1.0

[node name="Wall_Top" type="StaticBody2D" parent="Wall_Container"]
script = ExtResource( 6 )

[node name="ColorRect" type="ColorRect" parent="Wall_Container/Wall_Top"]
margin_left = -100.0
margin_top = -190.0
margin_right = 1124.0
margin_bottom = 10.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="Wall_Container/Wall_Top"]
position = Vector2( 512, -90 )
shape = SubResource( 2 )

[node name="Fire" type="CPUParticles2D" parent="Wall_Container/Wall_Top"]
emitting = false
amount = 10
lifetime = 0.8
one_shot = true
explosiveness = 0.6
randomness = 1.0
local_coords = false
texture = ExtResource( 17 )
direction = Vector2( 0, 0 )
spread = 90.0
initial_velocity = 600.0
initial_velocity_random = 1.0
angular_velocity = 400.0
angular_velocity_random = 1.0
scale_amount_curve = SubResource( 6 )
color_ramp = SubResource( 7 )
hue_variation = 1.0
hue_variation_random = 1.0

[node name="Brick_Container" type="Node2D" parent="."]
pause_mode = 2
script = ExtResource( 1 )

[node name="Paddle_Container" type="Node2D" parent="."]

[node name="Paddle" parent="Paddle_Container" instance=ExtResource( 2 )]
position = Vector2( 462, 740 )

[node name="Ball_Container" type="Node2D" parent="."]
script = ExtResource( 3 )

[node name="UI" type="CanvasLayer" parent="."]

[node name="HUD" parent="UI" instance=ExtResource( 7 )]
pause_mode = 0
visible = false

[node name="Pause_Menu" parent="UI" instance=ExtResource( 5 )]
visible = false

[node name="Instructions" parent="UI" instance=ExtResource( 8 )]
pause_mode = 2

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 3 )

[node name="Music" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 14 )
volume_db = -20.0
autoplay = true

[node name="Brick_Sound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 9 )
volume_db = -15.0

[node name="Wall_Sound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 10 )
volume_db = -10.0

[node name="Paddle_Sound" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 13 )
volume_db = -10.0
pitch_scale = 0.8

[node name="Fireworks_1" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 12 )
volume_db = -15.0
pitch_scale = 0.25
autoplay = true

[node name="Fireworks_2" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 11 )
volume_db = -15.0
pitch_scale = 0.4
autoplay = true

[node name="Death" type="AudioStreamPlayer" parent="."]
stream = ExtResource( 15 )
volume_db = -15.0

[node name="Camera" type="Camera2D" parent="."]
anchor_mode = 0
current = true
script = ExtResource( 16 )
